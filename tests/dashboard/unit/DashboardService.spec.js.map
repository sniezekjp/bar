{"version":3,"sources":["es6/tests/dashboard/unit/DashboardService.spec.js"],"names":[],"mappings":";;;;;MAAO,KAAK;;MACL,OAAO;;AAEd,UAAQ,CAAC,kBAAkB,EAAE,YAAY;AACvC,QAAI,YAAY,EAAE,cAAc,EAAE,OAAO,CAAC;;AAE1C,cAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;;AAE1B,YAAQ,CAAC,OAAO,EAAE,YAAY;AAC5B,gBAAU,CAAC,MAAM,CAAC,UAAU,gBAAgB,EAAE,cAAc,EAAE;AAC5D,eAAO,GAAG,gBAAgB,CAAC;AAC3B,oBAAY,GAAG,cAAc,CAAC;AAC9B,sBAAc,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;OACpD,CAAC,CAAC,CAAC;;AAEJ,QAAE,CAAC,uBAAuB,EAAE,YAAY;AACtC,sBAAc,CAAC,OAAO,CAAC,GAAG,EAAE,EAAC,IAAI,EAAC,EAAE,EAAE,QAAQ,EAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;AACnE,eAAO,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACnC,gBAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChC,CAAC,CAAC;AACH,oBAAY,CAAC,KAAK,EAAE,CAAC;OACtB,CAAC,CAAC;;AAEH,QAAE,CAAC,sBAAsB,EAAE,YAAY;AACrC,sBAAc,CAAC,OAAO,CAAC,GAAG,EAAE,EAAC,IAAI,EAAC,EAAE,EAAE,QAAQ,EAAC,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC,CAAC;AAChF,eAAO,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,GAAG,EAAE;AACjC,gBAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,gBAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;SACnC,CAAC,CAAC;AACH,oBAAY,CAAC,KAAK,EAAE,CAAC;OACtB,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC","file":"es6/tests/dashboard/unit/DashboardService.spec.js","sourcesContent":["import mocks from 'mocks';\nimport service from 'modules/dashboard/services/DashboardService';\n\ndescribe('DashboardService', function () {\n  var $httpBackend, requestHandler, Service;\n\n  beforeEach(module('app'));\n\n  describe('get()', function () {\n    beforeEach(inject(function (DashboardService, _$httpBackend_) {\n      Service = DashboardService;\n      $httpBackend = _$httpBackend_;\n      requestHandler = $httpBackend.when('GET', '/data');\n    }));\n    \n    it('should handle success', function () {\n      requestHandler.respond(200, {data:{}, messages:[], success: true});\n      Service.get().success(function (res) {\n        expect(res.success).toBe(true);\n      });\n      $httpBackend.flush();\n    });\n\n    it('should handle errors', function () {\n      requestHandler.respond(500, {data:{}, messages:[\"500 Error!\"], success: false});\n      Service.get().error(function (res) {\n        expect(res.success).toBe(false);\n        expect(res.messages).toBeTruthy();\n      });\n      $httpBackend.flush();\n    });    \n  }); \n});"]}